{"version":3,"file":"static/js/538.423e49ea.chunk.js","mappings":"6OAAA,aAAO,OAAP,oBAAO,WAA4BA,GAA5B,iFACO,mCACNC,EAFD,6CAE6CD,EAF7C,qBAKkBE,MAAM,GAAD,OAAID,EAAJ,oBAJhB,mCAIgB,oBALvB,YAKCE,EALD,QAMQC,GANR,iCAOiBD,EAASE,OAP1B,cAOGC,EAPH,yBASEA,EAAMC,MATR,iCAWEC,QAAQC,OAAO,IAAIC,MAAJ,oBAXjB,mE,gCCEMC,EAAWC,EAAAA,EAAAA,GAAH,6KAQRC,EAAWD,EAAAA,EAAAA,GAAH,wGAMRE,EAAaF,EAAAA,EAAAA,IAAH,4DAKVG,EAAWH,EAAAA,EAAAA,GAAH,iEAKRI,EAAgBJ,EAAAA,EAAAA,KAAH,iE,SCW1B,EAjCiB,SAAC,GAAc,IAAZL,EAAW,EAAXA,KAClB,OAEI,SAACI,EAAD,UACGJ,EAAKU,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACnC,OACE,UAACR,EAAD,YACI,SAACC,EAAD,CACEQ,IACEF,EAAY,0CAAsCA,GAAiB,6EAErEG,IAAKF,KAET,SAACN,EAAD,UAAWI,GAAc,wCACzB,UAACJ,EAAD,0BAAqB,SAACC,EAAD,UAAgBK,SARxBH,EAWlB,KAGR,ECCD,EAnBa,WACX,IAAQlB,GAAYwB,EAAAA,EAAAA,MAAZxB,QACR,GAAwByB,EAAAA,EAAAA,UAAS,MAAjC,eAAOlB,EAAP,KAAamB,EAAb,KAUE,OARFC,EAAAA,EAAAA,YAAU,YHVL,SAAP,mCGWIC,CAAaC,OAAO7B,IACjB8B,KAAKJ,GACLK,OAAM,SAAAC,GACLxB,QAAQC,OAAO,IAAIC,MAAJ,UAAasB,EAAMC,UACnC,GACJ,GAAE,CAACjC,KAGE,8BACCO,GAAQA,EAAK2B,OAAS,GAAK,SAAC,EAAD,CAAU3B,KAAMA,KAAa,+DAGhE,C,sBCvBD,SAAS4B,EAAmBC,EAAKC,EAAS5B,EAAQ6B,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAON,EAAII,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOX,GAEP,YADAvB,EAAOuB,EAET,CAEIU,EAAKE,KACPP,EAAQM,GAERnC,QAAQ6B,QAAQM,GAAOb,KAAKQ,EAAOC,EAEvC,CAEe,SAASM,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAI1C,SAAQ,SAAU6B,EAAS5B,GACpC,IAAI2B,EAAMU,EAAGK,MAAMJ,EAAME,GAEzB,SAASX,EAAMK,GACbR,EAAmBC,EAAKC,EAAS5B,EAAQ6B,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOa,GACdjB,EAAmBC,EAAKC,EAAS5B,EAAQ6B,EAAOC,EAAQ,QAASa,EACnE,CAEAd,OAAMe,EACR,GACF,CACF,C","sources":["services/movieCastApi.js","components/CastCard/CastCard.styled.jsx","components/CastCard/CastCard.js","pages/Cast/Cast.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["export async function getMovieCast(movieId) {\n  const key = 'f637ff1bcaf74a417438f57fb9f0b1d7';\n  const url = `https://api.themoviedb.org/3/movie/${movieId}/credits`;\n  \n\n  const response = await fetch(`${url}?api_key=${key}&language=en-US`);\n  if (response.ok) {\n    const movie = await response.json();\n\n  return movie.cast;\n  }\n  return Promise.reject(new Error(`Someting wrong`))\n\n};\n\n","import styled from \"@emotion/styled\";\n\nexport const CastList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n  gap: 25px;\n  padding: 20px;\n`;\n\nexport const CastItem = styled.li`\n  flex-basis: calc((100% - 40px) / 6);\n  text-align: center;\n  width: 150px;\n`;\n\nexport const CastPoster = styled.img`\n  display: block;\n  width: 150px;\n`;\n\nexport const CastName = styled.h4`\n  font-size: 18px;\n  font-weight: 700;\n`;\n\nexport const CastCharacter = styled.span`\n  font-size: 16px;\n  font-weight: 500;\n`;","import PropTypes from 'prop-types';\n\nimport { CastList, CastItem, CastPoster, CastName, CastCharacter } from './CastCard.styled';\n\nconst CastCard = ({ cast }) => {\n  return (\n     \n      <CastList>\n        {cast.map(({ id, name, profile_path, character }) => {\n          return (\n            <CastItem key={id}>\n                <CastPoster\n                  src={\n                    profile_path ? `https://image.tmdb.org/t/p/w500/${profile_path}` : \"https://ik.imagekit.io/tc8jxffbcvf/default-movie-portrait_EmJUj9Tda5wa.jpg\"\n                  }\n                  alt={character}\n              />\n              <CastName>{name ? name : \"There is no information about name\"}</CastName>\n              <CastName>Character: <CastCharacter>{character}</CastCharacter></CastName>\n            </CastItem>\n          );\n        })}\n      </CastList>\n  );\n}\n\nCastCard.propTypes = {\n  cast: PropTypes.arrayOf(\n         PropTypes.shape({\n          id: PropTypes.number,\n          name: PropTypes.string,\n          profile_path: PropTypes.string,\n          character: PropTypes.string,\n    })\n        ),\n};\n\nexport default CastCard;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport {getMovieCast} from 'services/movieCastApi';\nimport  CastCard  from 'components/CastCard/CastCard';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);    \n\n  useEffect(() => {\n    getMovieCast(Number(movieId))\n      .then(setCast)\n      .catch(error => {\n        Promise.reject(new Error(`${error.message}`))\n      })\n  }, [movieId ]);\n    \n    return (\n        <>\n        {cast && cast.length > 0 ? (<CastCard cast={cast} />) : (<p>There is no information about cast</p>)}\n            </>\n    );\n}\n\nexport default Cast;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["movieId","url","fetch","response","ok","json","movie","cast","Promise","reject","Error","CastList","styled","CastItem","CastPoster","CastName","CastCharacter","map","id","name","profile_path","character","src","alt","useParams","useState","setCast","useEffect","getMovieCast","Number","then","catch","error","message","length","asyncGeneratorStep","gen","resolve","_next","_throw","key","arg","info","value","done","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}